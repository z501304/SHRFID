C51 COMPILER V9.57.0.0   COMMUNICATION                                                     06/03/2023 17:44:18 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE COMMUNICATION
OBJECT MODULE PLACED IN communication.OBJ
COMPILER INVOKED BY: D:\Keil5\Keil5_C51\C51\BIN\C51.EXE communication.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS
                    -(2)

line level    source

   1          //---------------------------------------------------------------------
   2          //   PROG : 
   3          //   DATE : 2013.12
   4          //   COMP : sh-rfid
   5          //   FILE : rs232.c
   6          //   DESP : all file list
   7          //-----------------------------------------------------------------------------------
   8          #include "include.h"
   9          
  10          #define INBUF_LEN   0x0d    //lenth of buffer    
  11          
  12          #define Revcom_head  0x02   //the first data of the command. 
  13          #define Revcom_tail  0x03     //the last data of the command.
  14          
  15          unsigned int CURRENT_FATHER_PROCESS ;   
  16          unsigned int CURRENT_SON_PROCESS ;  
  17          unsigned int CURRENT_GRANDSON_PROCESS ; 
  18          unsigned char RD_command_Hpara1 ; 
  19          unsigned char RD_command_Hpara2 ;
  20          //unsigned char RD_command_Lpara1 ; 
  21          //unsigned char RD_command_Lpara2 ; 
  22          
  23          
  24          unsigned char prog_book_drop_kind = 0x00;
  25          unsigned char RevolEnable = 0;
  26          unsigned char prog_book_drop_Return =  0x00;
  27          
  28          
  29          
  30          unsigned char SerialInbuff[INBUF_LEN];
  31          unsigned char InBuff[INBUF_LEN];
  32          
  33          unsigned char RecvIndex;
  34          unsigned char RecvState;
  35          uchar crcbuf_Out[6],crcbuf_In[6];
  36          
  37          // intitiate serial port---------------------------------------------------------------
  38          void initiate_RS232 (void)         
  39          {
  40   1          ES = 0;                          // Against the serial port interrupt
  41   1          TMOD |= 0x20;                    // set the baud rate generator T1
  42   1          SCON = 0x50;                     // 0101,0000  8 data bits, no parity
  43   1          TH1 = 0xFD;                      // 22.1184MHz crystal oscillator, baud rate = 19200
  44   1          TL1 = 0xFD;
  45   1          RI = 0;              // Allow the serial port to receive
  46   1          TR1 = 1;             
  47   1          EA = 1;                          // Open the master switch of interrupt
  48   1          PCON = 0x80;                     // Double Frequency, baud rate = 19200 * 2 = 38400
  49   1          ES = 1;                          // Allow the serial port interrupt
  50   1      }
  51          //Serial port receive interrupt function-----------------------------------------------
  52          void serial () interrupt 4 using 3
  53          {
  54   1        if(RI)
C51 COMPILER V9.57.0.0   COMMUNICATION                                                     06/03/2023 17:44:18 PAGE 2   

  55   1        {
  56   2            RI = 0; 
  57   2          if(RecvIndex > 0x0b)                  //如果接收数据大于11，说明数据溢出，拒绝接收
  58   2          {
  59   3            RecvIndex =0;                   //重新开始接收数据
  60   3            return ;
  61   3          }
  62   2          SerialInbuff[RecvIndex]  = SBUF;    
  63   2          if(SerialInbuff[0] == Revcom_head)            /*起始标志*/
  64   2          {
  65   3            RecvIndex = RecvIndex +1; 
  66   3            if(RecvIndex == 0x0b && RecvIndex <= INBUF_LEN)   /* 判断是否接收完成*/
  67   3            { 
  68   4              RecvIndex = 0;
  69   4              RecvState = RecvStateEnd;               
  70   4            }
  71   3            else
  72   3              RecvState = RecvStateBuzzy;       
  73   3          }
  74   2          else
  75   2             RecvIndex = 0;
  76   2        }
  77   1      }
  78          
  79          //Delay function-----------------------------------------------
  80          
  81          //void delay_1msx(unsigned int msxnum)  
  82          //{
  83          //    unsigned char a,b,c;
  84          //
  85          //    for(c= msxnum;c>0;c--)
  86          //      for(b=80;b>0;b--)
  87          //        for(a=10;a>0;a--);
  88          //}
  89          
  90          //send one byte data to serial port-----------------------------------------------------
  91          
  92          void send_char_com(unsigned char ch) 
  93          {
  94   1        SBUF=ch;
  95   1        while(TI==0);
  96   1        TI=0;
  97   1      }
  98          
  99          //send one string data to serial port-----------------------------------------------------
 100          
 101          void send_string_com(unsigned char *str) 
 102          {
 103   1        unsigned char Str_Buff[0x0b] = {0};
 104   1        unsigned int crcTemp = 0; 
 105   1        unsigned int k;
 106   1        for(k=0;k<0x0b;k++)
 107   1          Str_Buff[k] = str[k];
 108   1        crcTemp=CRC3(&Str_Buff[2], 6);
 109   1        Str_Buff[9]= (unsigned char)crcTemp;
 110   1        Str_Buff[8]= (unsigned char)(crcTemp>>8); 
 111   1        k = 0;
 112   1        do
 113   1        {
 114   2          send_char_com(*(Str_Buff + k));
 115   2          k++;
 116   2        } while(k < 0x0b); 
C51 COMPILER V9.57.0.0   COMMUNICATION                                                     06/03/2023 17:44:18 PAGE 3   

 117   1      }
 118           void send_string_err(unsigned char err_State) 
 119          {
 120   1        unsigned char Err_Buff[0x0b] = {0},i;
 121   1        unsigned int crcTemp = 0; 
 122   1        for(i=0;i<0x0b;i++)
 123   1          Err_Buff[i] = InBuff[i];
 124   1        Err_Buff[0] = 0x82;
 125   1        Err_Buff[3] = err_State;  
 126   1        crcTemp=CRC3(&Err_Buff[2], 6);
 127   1        Err_Buff[9]= (unsigned char)crcTemp;
 128   1        Err_Buff[8]= (unsigned char)(crcTemp>>8);  
 129   1        Err_Buff[10]= 0x83;
 130   1        i = 0;
 131   1        do
 132   1        {
 133   2          send_char_com(*(Err_Buff + i));
 134   2          i++;
 135   2        } while(i < 0x0b); 
 136   1      }
 137            


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    296    ----
   CONSTANT SIZE    =     22    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     51      28
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
